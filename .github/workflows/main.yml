name: Build

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:

jobs:
  build-openwrt:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            sdk: https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-toolchain-23.05.3-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
          - target: aarch64-unknown-linux-musl
            sdk: https://downloads.openwrt.org/releases/23.05.3/targets/armsr/armv8/openwrt-toolchain-23.05.3-armsr-armv8_gcc-12.3.0_musl.Linux-x86_64.tar.xz
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl wget tar
      - name: Setup and verify toolchain
        run: |
          mkdir -p ~/openwrt
          wget "${{ matrix.sdk }}" -qO- | tar --strip-components 1 -C ~/openwrt -xvJ
          toolchain="$(ls -d ~/openwrt/toolchain-*)"
          export PATH="${toolchain}/bin:$PATH"
          
          # 验证工具链
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            x86_64-openwrt-linux-gcc --version
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            aarch64-openwrt-linux-gcc --version
          fi
      - name: Build
        run: |
          rustup toolchain add stable
          rustup +stable target add ${{ matrix.target }}
          toolchain="$(ls -d ~/openwrt/toolchain-*)"
          export PATH="${toolchain}/bin:$PATH"
          
          # 设置目标特定的环境变量
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            export TARGET_CC=x86_64-openwrt-linux-gcc
            export TARGET_CXX=x86_64-openwrt-linux-g++
            export TARGET_AR=x86_64-openwrt-linux-ar
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            export TARGET_CC=aarch64-openwrt-linux-gcc
            export TARGET_CXX=aarch64-openwrt-linux-g++
            export TARGET_AR=aarch64-openwrt-linux-ar
          fi
          
          # 使用 cross 的方式设置环境变量（将连字符替换为下划线）
          TARGET_VAR=$(echo "${{ matrix.target }}" | tr '-' '_')
          export CC_$TARGET_VAR=$TARGET_CC
          export CXX_$TARGET_VAR=$TARGET_CXX
          export AR_$TARGET_VAR=$TARGET_AR
          
          # 设置 CARGO_TARGET_..._LINKER 环境变量
          export CARGO_TARGET_${TARGET_VAR}_LINKER=$TARGET_CC
          
          # 添加 RUSTFLAGS 以避免使用内置的 CRT 对象并使用正确的链接器
          export RUSTFLAGS="-C target-feature=-crt-static -C linker=$TARGET_CC"
          
          # 调试信息
          echo "Target: ${{ matrix.target }}"
          echo "TARGET_VAR: $TARGET_VAR"
          echo "CC_$TARGET_VAR: $(eval echo \$CC_$TARGET_VAR)"
          echo "CARGO_TARGET_${TARGET_VAR}_LINKER: $(eval echo \$CARGO_TARGET_${TARGET_VAR}_LINKER)"
          echo "RUSTFLAGS: $RUSTFLAGS"
          
          # 验证链接器
          $TARGET_CC --version
          
          # 构建项目
          cargo +stable build --release --target ${{ matrix.target }}
          
          # 压缩二进制文件
          upx --best --no-lzma target/${{ matrix.target }}/release/iptv || true
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/iptv
